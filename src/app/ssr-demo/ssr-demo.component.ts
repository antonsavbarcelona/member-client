import { CommonModule, isPlatformBrowser, isPlatformServer } from '@angular/common';
import { Component, inject, PLATFORM_ID } from '@angular/core';

@Component({
  selector: 'app-ssr-demo',
  imports: [CommonModule],
  template: `
    <section class="ssr-demo">
      <header>
        <h1>Angular SSR Demo</h1>
        <p class="lead">
          This page is rendered on the server, hydrated on the client, and keeps API calls in sync with the Transfer Cache.
        </p>
      </header>

      <article class="info-card">
        <h2>Runtime Details</h2>
        <p>
          <strong>Current platform:</strong>
          <span [class.browser]="isBrowser" [class.server]="isServer">
            {{ isServer ? 'Server' : 'Browser' }}
          </span>
        </p>
        <p><strong>Render timestamp:</strong> {{ timestamp }}</p>
      </article>

      <article class="info-card" *ngIf="isBrowser">
        <h2>Browser Only Data</h2>
        <p>This block is shown only after hydration.</p>
        <p><strong>Window width:</strong> {{ windowWidth }}px</p>
        <p><strong>User agent:</strong> {{ userAgent }}</p>
      </article>

      <article class="info-card" *ngIf="isServer">
        <h2>Server Only Data</h2>
        <p>Visible in the HTML source generated by the Node runtime.</p>
      </article>

      <article class="info-card">
        <h2>How to Validate SSR</h2>
        <ol>
          <li>Run <code>nx build member-client</code></li>
          <li>Start the server with <code>nx serve-ssr member-client</code></li>
          <li>Open <code>http://localhost:4000</code> in your browser</li>
          <li>Use "View page source" to inspect the pre-rendered markup</li>
        </ol>
      </article>
    </section>
  `,
  styles: [`
    .ssr-demo {
      max-width: 880px;
      margin: 2rem auto;
      padding: 0 1.5rem;
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      color: #222;
    }

    header {
      text-align: center;
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    .lead {
      font-size: 1.05rem;
      color: #555;
      margin: 0;
    }

    .info-card {
      background: #f5f7fb;
      border-radius: 10px;
      padding: 1.5rem;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    .info-card h2 {
      margin: 0;
      font-size: 1.25rem;
      color: #1d4ed8;
    }

    .browser {
      color: #2563eb;
      font-weight: 600;
    }

    .server {
      color: #16a34a;
      font-weight: 600;
    }

    code {
      background: rgba(29, 78, 216, 0.12);
      padding: 0.2rem 0.4rem;
      border-radius: 4px;
      font-size: 0.95rem;
    }

    ol {
      margin: 0;
      padding-left: 1.25rem;
      line-height: 1.6;
    }

    @media (max-width: 600px) {
      .ssr-demo {
        padding: 0 1rem;
      }

      .info-card {
        padding: 1.25rem;
      }
    }
  `]
})
export class SsrDemoComponent {
  private readonly platformId = inject(PLATFORM_ID);

  protected readonly isBrowser = isPlatformBrowser(this.platformId);
  protected readonly isServer = isPlatformServer(this.platformId);
  protected readonly timestamp = new Date().toISOString();
  protected windowWidth = 0;
  protected userAgent = '';

  constructor() {
    if (this.isBrowser) {
      this.windowWidth = window.innerWidth;
      this.userAgent = navigator.userAgent;

      window.addEventListener('resize', () => {
        this.windowWidth = window.innerWidth;
      });
    }
  }
}
